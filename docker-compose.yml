version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: sentinel-db
    environment:
      POSTGRES_DB: sentinel
      POSTGRES_USER: postgres  
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/main/resources/db/migration:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sentinel-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sentinel-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sentinel-network

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: sentinel-backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DATABASE_URL=jdbc:postgresql://db:5432/sentinel
      - DATABASE_USERNAME=postgres
      - DATABASE_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID:-your_client_id}
      - KAKAO_CLIENT_SECRET=${KAKAO_CLIENT_SECRET:-your_client_secret}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY:-your_api_key}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - sentinel-network

  # Frontend
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sentinel-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8080
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - sentinel-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: sentinel-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - sentinel-network

volumes:
  postgres_data:
  redis_data:

networks:
  sentinel-network:
    driver: bridge